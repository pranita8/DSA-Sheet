#include<bits/stdc++.h>
using namespace std;
class solution
{
    public:
    long long merge(long long arr[],long long l,long mid,long long r)
    {
        long long count=0;
        long long n1=mid-l+1;
        long long n2=r-mid;
        long long arr1[n1],arr2[n2];
        for(int i=0;i<n1;i++)
        {
            arr1[i]=arr[i+l];

        }
        for(int i=0;i<n2;i++)
        {
            arr2[i]=arr[mid+1+i];
        }
        long long i=0,j=0,k=l;
        while(i<n1 && j<n2)
        {
            if(arr1[i]<=arr2[j])
            {
                arr[k]=arr1[i];
                k++;
                i++;
            }
            else{
                arr[k]=arr2[j];
                k++;
                j++;
                count=count+(n1-i);
            }
        }
        while(i<n1)
        {
            arr[k]=arr1[i];
            i++;
            k++;
        }
        while(j<n2)
        {
            arr[k]=arr2[j];
            k++;
            j++;
        }
        return count;
    }
    long long mergesort(long long arr[],long long l,long long r)
    {
        long long count=0;
        long long mid=0;
        if(l<r)
        {
            mid=(l+r)/2;
            count+=mergesort(arr,l,mid);
            count+=mergesort(arr,mid+1,r);
            count+= merge(arr,l,mid,r);

        }
        return count;
    }
    long long inversioncount(long long arr[],long long n)
    {
        /----------->*O(N^2) Approch
      int count=0;
      for(int i=0;i<n-1;i++)
       {
          for(int j=i+1;j<n;j++)
        {
            if(arr[i]>arr[j])
            count++;
        }
    }
    return count;----------->*/
    
       return mergesort(arr,0,n-1);
    }
};
int main()
{
    long long n;
    cin>>n;
    long long arr[n];
    for(long long i=0;i<n;i++)
    {
        cin>>arr[i];
    }
    solution obj;
    cout<<obj.inversioncount(arr,n);
    return 0;
}
