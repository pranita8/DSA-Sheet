#include <bits/stdc++.h>
using namespace std;
class Solution{
public:
void merge(vector<int>&count,vector<pair<int,int>>&v, int left, int mid,int right)
{
    vector<pair<int ,int>>temp(right-left+1);
    int i=left;
    int j=mid+1;
    int k=0;
    while(i<=mid &&j<=right)
    {
        if(v[i].first<=v[j].first)
        {
            temp[k]=v[j];
            k++;
            j++;
        }
        else
        {
            count[v[i].second]+=right-j+1;
            temp[k]=v[i];
            k++;
            i++;
        }
    }
    while(i<=mid)
    {
        temp[k]=v[i];
        k++;
        i++;
    }
    while(j<=right)
    {
        temp[k]=v[j];
        k++;
        j++;
    }
    for(int i=left;i<=right;i++)
    {
        v[i]=temp[i-left];
    }
}
 void mergeSort(vector<int> &count, vector<pair<int,int>> &v, int left, int right){
        
        
        if(left<right){
            int mid = left + (right-left)/2;
            mergeSort(count, v, left, mid);
            mergeSort(count, v, mid+1, right);
            merge(count, v, left, mid, right);
        }
        
    }
    
	vector<int> constructLowerArray(int arr[], int n) {
	 vector<pair<int,int>>v(n);
	 for(int i=0;i<n;i++)
	 {
	     pair<int,int>p;
	     p.first=arr[i];
	     p.second=i;
	     v[i]=p;
	 }
	 vector<int>count(n,0);
	 mergeSort(count,v,0,n-1);
	 return count;
       } 
};

int main() {
   
        int n;
        cin >> n;
        int arr[n];
        for (int i = 0; i < n; i++) {
            cin >> arr[i];
        }
        Solution ob;
        auto ans = ob.constructLowerArray(arr, n);
        for (auto x : ans) {
            cout << x << " ";
        }
        cout << "\n";
    
    return 0;
}

// } Driver Code Ends
