#include<bits/stdc++.h>
using namespace std;
#define MAX 1000

class Solution{
  public:
  vector<int>prevsmall(int arr[],int n)
    {
        vector<int>ans;
        stack<int>s;
        //s.push(-1);
        for(int i=0;i<n;i++)
        {
            int curr=arr[i];
            while(!s.empty() && arr[s.top()]>=curr)
            {
                s.pop();
            }
            if(s.empty())
            ans.push_back(-1);
            else
            ans.push_back(s.top());
            s.push(i);
        }
        return ans;
    }
    vector<int>nextsmall(int arr[],int n)
    {
        vector<int>ans(n);
        stack<int>s;
        //s.push(-1);
        for(int i=n-1;i>=0;i--)
        {
            int curr=arr[i];
            while(!s.empty() && arr[s.top()]>=curr)
            {
                s.pop();
            }
            if(s.empty())
            ans.push_back(n);
            else
            ans.push_back(s.top());
            
            s.push(i);
        }
        reverse(ans.begin(),ans.end());
        return ans;
    }
    
    int getMaxArea(int arr[], int n)
    {
        int maxans=0;
        vector<int>ps=prevsmall(arr,n);
        vector<int>ns=nextsmall(arr,n);
        for(int i=0;i<n;i++)
        {
            int ans=(ns[i]-ps[i]-1)*arr[i];
            maxans=max(maxans,ans);
        }
        return maxans;
    }
    int maxArea(int M[MAX][MAX], int n, int m) {

        int area=getMaxArea(M[0],m);
        for(int i=1;i<n;i++)
        {
            for(int j=0;j<m;j++)
            {
                if(M[i][j]!=0)
                {
                    M[i][j]=M[i][j]+M[i-1][j];
                }
                else
                {
                    M[i][j]=0;
                }
            }
            area=max(area,getMaxArea(M[i],m));
            
        }
        return area;
    }
};

int main() {
    int T;
    cin >> T;

    int M[MAX][MAX];

    while (T--) {
        int n, m;
        cin >> n >> m;

        for (int i = 0; i < n; i++) {
            for (int j = 0; j < m; j++) {
                cin >> M[i][j];
            }
        }
        Solution obj;
        cout << obj.maxArea(M, n, m) << endl;
    }
}

